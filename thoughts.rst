Про архитектуру
---------------

Для начала давайте определимся, что такое архитектура, почему
что-то ей явлейтся, а что-то нет. Все очень просто, архитектура —
это то что нужно решить прямо сейчас, без чего невозможно дальнейшее
движение вперед. Если принятие решения можно отложить до лучших времен,
то это не архитектура. Очень часто, если хорошо подумать, "важные архитектурные
проблемы" перестают быть таковыми и являются пустой тратой времени на данном этапе.
Цель лида, технического руководителя пресекать метанния команды и сфокусировать
разработку на конкретных проблемах. К сожалению правило 95% применимо
и к техническим руководителям, которые очень легко смешивают цели проекта
и личный интерес сделать сразу правильно и красиво, тогда последней надеждой
является PM. Рассмотрим самые больные места, на которые будет потрачено время
без реальной пользы для MVP.


Микросервисная архитектура
--------------------------

Классический булшит бинго.  Если у вас стартап, вы PM и слышите от руководителя
бека, что будет микросервисная архитектура, то вы обречены). Гарантирую
сорванные сроки и постоянные проблемы во время разработки.

Так вот, микросервисная архитектура, это не архитектура, это просто вариант деплоя
сервиса, на который можно перейти потом. Также микросервисы позволяют
проводить более строгие и труднонарушаемые границы между компонентами. На
начальном этапе это абсолютное зло без исключений, как правило еще не известна
предметная область, нет модели данных, нет финального списка пользовательских
историй, вообще ничего не известно, но уже принимается решение о жестких
границах. Они будут мешать. Бонусные проблемы, которые возникнут прицепом:

1) Кодовая база будет в нескольких репах. На начальном этапе нет понимания, как
будут выглядеть компоненты, и разделение выйдет механическим, что приведет
к нахождению сцепленного кода (который меняется одновременно по одной причние)
по разные стороны баррикад. Скорее всего проблема синхронизации зависимостей
будет решаться одним из двух способов или их комбинацией:

1.a) Сабмодули в VCS. Как правило, это гит и, как праило, это боль.
     С пресловутыми uncommited changes в корневой репе. В условиях когда
     нужно просто фигачить код, ваша команда будет тратить время на выяснение
     какие конкретно версии сабмодулей нужны чтобы все завелось и работало.

1.b) Опакечивание микросервисов. Это квази решение, так как в условиях
     сцепленного кода, не будет обратной совместимости, и опять таки потребует
     волшебной комбинации версий пакетов для работы.
